-keep class j$.util.Collection { *; }
-keep class j$.util.Comparator { *; }
-keep class j$.util.List { *; }
-keep class j$.util.Map { *; }
-keep class j$.lang.Iterable$-CC {
    void $default$forEach(java.lang.Iterable, java.util.function.Consumer);
}
-keep class j$.util.Collection$-CC {
    j$.util.stream.Stream $default$parallelStream(java.util.Collection);
    boolean $default$removeIf(java.util.Collection, java.util.function.Predicate);
    j$.util.Spliterator $default$spliterator(java.util.Collection);
    j$.util.stream.Stream $default$stream(java.util.Collection);
    java.lang.Object[] $default$toArray(java.util.Collection, java.util.function.IntFunction);
}
-keep class j$.util.Comparator$-CC {
    java.util.Comparator $default$thenComparing(java.util.Comparator, java.util.Comparator);
    java.util.Comparator $default$thenComparing(java.util.Comparator, java.util.function.Function);
    java.util.Comparator $default$thenComparing(java.util.Comparator, java.util.function.Function, java.util.Comparator);
    java.util.Comparator $default$thenComparingDouble(java.util.Comparator, java.util.function.ToDoubleFunction);
    java.util.Comparator $default$thenComparingInt(java.util.Comparator, java.util.function.ToIntFunction);
    java.util.Comparator $default$thenComparingLong(java.util.Comparator, java.util.function.ToLongFunction);
}
-keep class j$.util.DesugarTimeZone {
    java.util.TimeZone getTimeZone(java.lang.String);
}
-keep class j$.util.List$-CC {
    j$.util.Spliterator $default$spliterator(java.util.List);
}
-keep class j$.util.Map$-CC {
    java.lang.Object $default$compute(java.util.Map, java.lang.Object, java.util.function.BiFunction);
    java.lang.Object $default$computeIfAbsent(java.util.Map, java.lang.Object, java.util.function.Function);
    java.lang.Object $default$computeIfPresent(java.util.Map, java.lang.Object, java.util.function.BiFunction);
    void $default$forEach(java.util.Map, java.util.function.BiConsumer);
    java.lang.Object $default$getOrDefault(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$merge(java.util.Map, java.lang.Object, java.lang.Object, java.util.function.BiFunction);
    java.lang.Object $default$putIfAbsent(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$replace(java.util.Map, java.lang.Object, java.lang.Object);
    boolean $default$replace(java.util.Map, java.lang.Object, java.lang.Object, java.lang.Object);
    void $default$replaceAll(java.util.Map, java.util.function.BiFunction);
}
-keep class j$.util.Map$-EL {
    java.lang.Object getOrDefault(java.util.Map, java.lang.Object, java.lang.Object);
}
-keep class j$.util.Objects {
    boolean equals(java.lang.Object, java.lang.Object);
    int hash(java.lang.Object[]);
    int hashCode(java.lang.Object);
    java.lang.Object requireNonNull(java.lang.Object);
    java.lang.String toString(java.lang.Object, java.lang.String);
}
-keep class j$.util.Spliterator$Wrapper {
    java.util.Spliterator convert(j$.util.Spliterator);
}
-keep class j$.util.Spliterator
-keep class j$.util.concurrent.ConcurrentHashMap {
    void <init>();
    java.lang.Object get(java.lang.Object);
    java.lang.Object put(java.lang.Object, java.lang.Object);
    java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object);
    java.lang.Object remove(java.lang.Object);
}
-keep class j$.util.concurrent.ThreadLocalRandom {
    j$.util.concurrent.ThreadLocalRandom current();
}
-keep class java.util.function.BiConsumer
-keep class java.util.function.BiFunction
-keep class java.util.function.Consumer
-keep class j$.util.function.Function$-CC {
    java.util.function.Function $default$andThen(java.util.function.Function, java.util.function.Function);
    java.util.function.Function $default$compose(java.util.function.Function, java.util.function.Function);
}
-keep class java.util.function.Function { *; }
-keep class java.util.function.IntFunction
-keep class java.util.function.Predicate
-keep class java.util.function.ToDoubleFunction
-keep class java.util.function.ToIntFunction
-keep class java.util.function.ToLongFunction
-keep class java.util.function.UnaryOperator
-keep class j$.util.stream.IntStream$VivifiedWrapper {
    j$.util.stream.IntStream convert(java.util.stream.IntStream);
}
-keep class j$.util.stream.IntStream$Wrapper {
    java.util.stream.IntStream convert(j$.util.stream.IntStream);
}
-keep class j$.util.stream.IntStream
-keep class j$.util.stream.Stream$Wrapper {
    java.util.stream.Stream convert(j$.util.stream.Stream);
}
-keep class j$.util.stream.Stream
